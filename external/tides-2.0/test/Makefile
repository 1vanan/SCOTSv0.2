# Makefile.in generated by automake 1.10.1 from Makefile.am.
# test/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



pkgdatadir = $(datadir)/tides
pkglibdir = $(libdir)/tides
pkgincludedir = $(includedir)/tides
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i386-apple-darwin15.0.0
host_triplet = i386-apple-darwin15.0.0
check_PROGRAMS = minc_kepler$(EXEEXT) minc_lorenz$(EXEEXT) \
	$(am__EXEEXT_1) std_kepler$(EXEEXT) \
	std_kepler_partials$(EXEEXT) std_lorenz$(EXEEXT) \
	std_lorenz_partials$(EXEEXT) $(am__EXEEXT_2)
#am__append_1 = minf_kepler minf_lorenz
#am__append_2 = mpfr_kepler mpfr_lorenz
am__append_3 = -lm
subdir = test
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ax_cc_maxopt.m4 \
	$(top_srcdir)/m4/ax_check_compiler_flags.m4 \
	$(top_srcdir)/m4/ax_compiler_vendor.m4 \
	$(top_srcdir)/m4/ax_gcc_archflag.m4 \
	$(top_srcdir)/m4/ax_gcc_x86_cpuid.m4 $(top_srcdir)/m4/gmp.m4 \
	$(top_srcdir)/m4/mpfr.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
#am__EXEEXT_1 = minf_kepler$(EXEEXT) \
#	minf_lorenz$(EXEEXT)
#am__EXEEXT_2 = mpfr_kepler$(EXEEXT) mpfr_lorenz$(EXEEXT)
am_minc_kepler_OBJECTS = test_minc_kepler.$(OBJEXT) \
	minc_kepler.$(OBJEXT)
minc_kepler_OBJECTS = $(am_minc_kepler_OBJECTS)
am_minc_lorenz_OBJECTS = test_minc_lorenz.$(OBJEXT) \
	minc_lorenz.$(OBJEXT)
minc_lorenz_OBJECTS = $(am_minc_lorenz_OBJECTS)
am_minf_kepler_OBJECTS = test_minf_kepler.$(OBJEXT) \
	minf_kepler.$(OBJEXT)
minf_kepler_OBJECTS = $(am_minf_kepler_OBJECTS)
am_minf_lorenz_OBJECTS = test_minf_lorenz.$(OBJEXT) \
	minf_lorenz.$(OBJEXT)
minf_lorenz_OBJECTS = $(am_minf_lorenz_OBJECTS)
am_mpfr_kepler_OBJECTS = test_mpfr_kepler.$(OBJEXT) \
	mpfr_kepler.$(OBJEXT)
mpfr_kepler_OBJECTS = $(am_mpfr_kepler_OBJECTS)
am_mpfr_lorenz_OBJECTS = test_mpfr_lorenz.$(OBJEXT) \
	mpfr_lorenz.$(OBJEXT)
mpfr_lorenz_OBJECTS = $(am_mpfr_lorenz_OBJECTS)
am_std_kepler_OBJECTS = test_std_kepler.$(OBJEXT) std_kepler.$(OBJEXT)
std_kepler_OBJECTS = $(am_std_kepler_OBJECTS)
am_std_kepler_partials_OBJECTS = test_std_kepler_partials.$(OBJEXT) \
	std_kepler_partials.$(OBJEXT)
std_kepler_partials_OBJECTS = $(am_std_kepler_partials_OBJECTS)
am_std_lorenz_OBJECTS = test_std_lorenz.$(OBJEXT) std_lorenz.$(OBJEXT)
std_lorenz_OBJECTS = $(am_std_lorenz_OBJECTS)
am_std_lorenz_partials_OBJECTS = test_std_lorenz_partials.$(OBJEXT) \
	std_lorenz_partials.$(OBJEXT)
std_lorenz_partials_OBJECTS = $(am_std_lorenz_partials_OBJECTS)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
F77COMPILE = $(F77) $(AM_FFLAGS) $(FFLAGS)
F77LD = $(F77)
F77LINK = $(F77LD) $(AM_FFLAGS) $(FFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o \
	$@
SOURCES = $(minc_kepler_SOURCES) $(minc_lorenz_SOURCES) \
	$(minf_kepler_SOURCES) $(minf_lorenz_SOURCES) \
	$(mpfr_kepler_SOURCES) $(mpfr_lorenz_SOURCES) \
	$(std_kepler_SOURCES) $(std_kepler_partials_SOURCES) \
	$(std_lorenz_SOURCES) $(std_lorenz_partials_SOURCES)
DIST_SOURCES = $(minc_kepler_SOURCES) $(minc_lorenz_SOURCES) \
	$(minf_kepler_SOURCES) $(minf_lorenz_SOURCES) \
	$(mpfr_kepler_SOURCES) $(mpfr_lorenz_SOURCES) \
	$(std_kepler_SOURCES) $(std_kepler_partials_SOURCES) \
	$(std_lorenz_SOURCES) $(std_lorenz_partials_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /Users/rungger/Documents/projects/scots/tides-2.0/missing --run aclocal-1.10
AMTAR = ${SHELL} /Users/rungger/Documents/projects/scots/tides-2.0/missing --run tar
AM_CFLAGS = -m64
AM_FFLAGS = -m64
AUTOCONF = ${SHELL} /Users/rungger/Documents/projects/scots/tides-2.0/missing --run autoconf
AUTOHEADER = ${SHELL} /Users/rungger/Documents/projects/scots/tides-2.0/missing --run autoheader
AUTOMAKE = ${SHELL} /Users/rungger/Documents/projects/scots/tides-2.0/missing --run automake-1.10
AWK = awk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -O3 -fomit-frame-pointer -fstrict-aliasing -ffast-math -mcpu=pentiumpro
CPPFLAGS = 
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = \c
ECHO_N = 
ECHO_T = 
EXEEXT = 
FC = 
FCFLAGS = 
FCFLAGS_f = 
HAVE_INLINE = 
INSTALL = /opt/local/bin/ginstall -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS =  $(am__append_3)
LTLIBOBJS = 
MAKEINFO = ${SHELL} /Users/rungger/Documents/projects/scots/tides-2.0/missing --run makeinfo
MKDIR_P = /opt/local/bin/gmkdir -p
OBJEXT = o
PACKAGE = tides
PACKAGE_BUGREPORT = tides@unizar.es
PACKAGE_NAME = libTIDES
PACKAGE_STRING = libTIDES 2.0
PACKAGE_TARNAME = tides
PACKAGE_VERSION = 2.0
PATH_SEPARATOR = :
PRTDIAG = 
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 2.0
abs_builddir = /Users/rungger/Documents/projects/scots/tides-2.0/test
abs_srcdir = /Users/rungger/Documents/projects/scots/tides-2.0/test
abs_top_builddir = /Users/rungger/Documents/projects/scots/tides-2.0
abs_top_srcdir = /Users/rungger/Documents/projects/scots/tides-2.0
ac_ct_CC = gcc
ac_ct_FC = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i386-apple-darwin15.0.0
build_alias = 
build_cpu = i386
build_os = darwin15.0.0
build_vendor = apple
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i386-apple-darwin15.0.0
host_alias = 
host_cpu = i386
host_os = darwin15.0.0
host_vendor = apple
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /Users/rungger/Documents/projects/scots/tides-2.0/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /opt/local/bin/gmkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
F77 = $(FC)
FFLAGS = $(FCFLAGS)
FLIBS = $(FCLIBS)
LIBTIDES = $(top_builddir)/libTIDES/libTIDES.a
minc_kepler_SOURCES = test_minc_kepler.c minc_kepler.c minc_tides.h
minc_lorenz_SOURCES = test_minc_lorenz.c minc_lorenz.c minc_tides.h
minc_kepler_LDADD = $(LIBTIDES)
minc_kepler_DEPENDENCIES = $(LIBTIDES)
minc_lorenz_LDADD = $(LIBTIDES)
minc_lorenz_DEPENDENCIES = $(LIBTIDES)
minf_kepler_SOURCES = test_minf_kepler.f minf_kepler.f
minf_lorenz_SOURCES = test_minf_lorenz.f minf_lorenz.f
minf_kepler_LDADD = $(LIBTIDES)
minf_kepler_DEPENDENCIES = $(LIBTIDES)
minf_lorenz_LDADD = $(LIBTIDES)
minf_lorenz_DEPENDENCIES = $(LIBTIDES)
std_kepler_SOURCES = test_std_kepler.c std_kepler.c std_kepler.h dp_tides.h
std_kepler_LDADD = $(LIBTIDES)
std_kepler_DEPENDENCIES = $(LIBTIDES)
std_kepler_partials_SOURCES = test_std_kepler_partials.c std_kepler_partials.c std_kepler_partials.h dp_tides.h
std_kepler_partials_LDADD = $(LIBTIDES)
std_kepler_partials_DEPENDENCIES = $(LIBTIDES)
std_lorenz_SOURCES = test_std_lorenz.c std_lorenz.c std_lorenz.h dp_tides.h
std_lorenz_LDADD = $(LIBTIDES)
std_lorenz_DEPENDENCIES = $(LIBTIDES)
std_lorenz_partials_SOURCES = test_std_lorenz_partials.c std_lorenz_partials.c std_lorenz_partials.h dp_tides.h
std_lorenz_partials_LDADD = $(LIBTIDES)
std_lorenz_partials_DEPENDENCIES = $(LIBTIDES)
mpfr_kepler_SOURCES = test_mpfr_kepler.c mpfr_kepler.c mpfr_kepler.h mp_tides.h
mpfr_kepler_LDADD = $(LIBTIDES)
mpfr_kepler_DEPENDENCIES = $(LIBTIDES)
mpfr_lorenz_SOURCES = test_mpfr_lorenz.c mpfr_lorenz.c mpfr_lorenz.h mp_tides.h
mpfr_lorenz_LDADD = $(LIBTIDES)
mpfr_lorenz_DEPENDENCIES = $(LIBTIDES)
TESTS = $(check_PROGRAMS)
all: all-am

.SUFFIXES:
.SUFFIXES: .c .f .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  test/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  test/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)
minc_kepler$(EXEEXT): $(minc_kepler_OBJECTS) $(minc_kepler_DEPENDENCIES) 
	@rm -f minc_kepler$(EXEEXT)
	$(LINK) $(minc_kepler_OBJECTS) $(minc_kepler_LDADD) $(LIBS)
minc_lorenz$(EXEEXT): $(minc_lorenz_OBJECTS) $(minc_lorenz_DEPENDENCIES) 
	@rm -f minc_lorenz$(EXEEXT)
	$(LINK) $(minc_lorenz_OBJECTS) $(minc_lorenz_LDADD) $(LIBS)
minf_kepler$(EXEEXT): $(minf_kepler_OBJECTS) $(minf_kepler_DEPENDENCIES) 
	@rm -f minf_kepler$(EXEEXT)
	$(F77LINK) $(minf_kepler_OBJECTS) $(minf_kepler_LDADD) $(LIBS)
minf_lorenz$(EXEEXT): $(minf_lorenz_OBJECTS) $(minf_lorenz_DEPENDENCIES) 
	@rm -f minf_lorenz$(EXEEXT)
	$(F77LINK) $(minf_lorenz_OBJECTS) $(minf_lorenz_LDADD) $(LIBS)
mpfr_kepler$(EXEEXT): $(mpfr_kepler_OBJECTS) $(mpfr_kepler_DEPENDENCIES) 
	@rm -f mpfr_kepler$(EXEEXT)
	$(LINK) $(mpfr_kepler_OBJECTS) $(mpfr_kepler_LDADD) $(LIBS)
mpfr_lorenz$(EXEEXT): $(mpfr_lorenz_OBJECTS) $(mpfr_lorenz_DEPENDENCIES) 
	@rm -f mpfr_lorenz$(EXEEXT)
	$(LINK) $(mpfr_lorenz_OBJECTS) $(mpfr_lorenz_LDADD) $(LIBS)
std_kepler$(EXEEXT): $(std_kepler_OBJECTS) $(std_kepler_DEPENDENCIES) 
	@rm -f std_kepler$(EXEEXT)
	$(LINK) $(std_kepler_OBJECTS) $(std_kepler_LDADD) $(LIBS)
std_kepler_partials$(EXEEXT): $(std_kepler_partials_OBJECTS) $(std_kepler_partials_DEPENDENCIES) 
	@rm -f std_kepler_partials$(EXEEXT)
	$(LINK) $(std_kepler_partials_OBJECTS) $(std_kepler_partials_LDADD) $(LIBS)
std_lorenz$(EXEEXT): $(std_lorenz_OBJECTS) $(std_lorenz_DEPENDENCIES) 
	@rm -f std_lorenz$(EXEEXT)
	$(LINK) $(std_lorenz_OBJECTS) $(std_lorenz_LDADD) $(LIBS)
std_lorenz_partials$(EXEEXT): $(std_lorenz_partials_OBJECTS) $(std_lorenz_partials_DEPENDENCIES) 
	@rm -f std_lorenz_partials$(EXEEXT)
	$(LINK) $(std_lorenz_partials_OBJECTS) $(std_lorenz_partials_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/minc_kepler.Po
include ./$(DEPDIR)/minc_lorenz.Po
include ./$(DEPDIR)/mpfr_kepler.Po
include ./$(DEPDIR)/mpfr_lorenz.Po
include ./$(DEPDIR)/std_kepler.Po
include ./$(DEPDIR)/std_kepler_partials.Po
include ./$(DEPDIR)/std_lorenz.Po
include ./$(DEPDIR)/std_lorenz_partials.Po
include ./$(DEPDIR)/test_minc_kepler.Po
include ./$(DEPDIR)/test_minc_lorenz.Po
include ./$(DEPDIR)/test_mpfr_kepler.Po
include ./$(DEPDIR)/test_mpfr_lorenz.Po
include ./$(DEPDIR)/test_std_kepler.Po
include ./$(DEPDIR)/test_std_kepler_partials.Po
include ./$(DEPDIR)/test_std_lorenz.Po
include ./$(DEPDIR)/test_std_lorenz_partials.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.f.o:
	$(F77COMPILE) -c -o $@ $<

.f.obj:
	$(F77COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonemtpy = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; ws='[	 ]'; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS) '; \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *$$ws$$tst$$ws*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		echo "XPASS: $$tst"; \
	      ;; \
	      *) \
		echo "PASS: $$tst"; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *$$ws$$tst$$ws*) \
		xfail=`expr $$xfail + 1`; \
		echo "XFAIL: $$tst"; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		echo "FAIL: $$tst"; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      echo "SKIP: $$tst"; \
	    fi; \
	  done; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="All $$all tests passed"; \
	    else \
	      banner="All $$all tests behaved as expected ($$xfail expected failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all tests failed"; \
	    else \
	      banner="$$failed of $$all tests did not behave as expected ($$xpass unexpected passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    skipped="($$skip tests were not run)"; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  echo "$$dashes"; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am:

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am: installcheck-local

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic ctags distclean \
	distclean-compile distclean-generic distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installcheck-local installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \
	tags uninstall uninstall-am


installcheck-local-no:
	env LIBTIDES='' LIBS='-lTIDES -lmpfr -lgmp -lm' $(MAKE) $(AM_MAKEFLAGS) -e check

installcheck-local:
	$(MAKE) $(AM_MAKEFLAGS) LIBTIDES='' LIBS='-L$(libdir) -lTIDES -lmpfr -lgmp -lm' clean $(check_PROGRAMS) check-TESTS
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
